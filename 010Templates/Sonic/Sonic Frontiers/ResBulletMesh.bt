//------------------------------------------------
//--- 010 Editor v12.0.1 Binary Template
//
//      File: 
//   Authors: Ashrindy
//   Version: 0.0.1
//   Purpose: 
//  Category: 
// File Mask: *.btmesh
//  ID Bytes: 
//   History: 
//------------------------------------------------


#include "../include.h"

local uint64 dataPos;

enum <byte> layertype{
    none = 0,
    solid,
    liquid,
    through,
    camera,
    solidOneWay,
    solidThrough,
    solidTiny,
    solidDetail,
    leaf,
    land,
    rayBlock,
    event,
    player = 0x0f,
    enemy,
    enemyBody,
    gimmick,
    dynamics,
    ring,
    characterControl,
    playerOnly,
    dynamicsThrough,
    enemyOnly,
    sensorPlayer,
    sensorRing,
    sensorGimmick,
    sensorLand,
    sensorAll
};

enum <byte> mat{
    empty = 0,
    stone,
    earth,
    wood,
    grass,
    iron,
    sand,
    lava,
    glass,
    snow,
    noEntry,
    ice,
    water,
    sea,
    damage,
    dead,
    flower0,
    flower1,
    flower2,
    air,
    deadLeaves,
    wireMesh,
    deadAnyDirections,
    damageThrough,
    dryGrass,
    relic,
    giant,
    gravel,
    hudWater,
    sand2,
    sand3
};

typedef struct{
    SetRandomBackColor();
    float unk0[3];
    int unk1;
}unkStr<optimize=false>;

typedef struct{
    SetRandomBackColor();
    layertype layer;
    byte unk;
    byte unk1;
    mat material;
}FaceTag<optimize=false>;

typedef struct{
    SetRandomBackColor();
    uint16 a;
    uint16 b;
    uint16 c;
}Face<optimize=false>;

typedef struct{
    SetRandomBackColor();
    int unk0[2];
    int vertexCount;
    int faceCount;
    int unk1;
    int tagCount;
    int unk2[2];
    int64 vertexOffset;
    int64 faceOffset;
    int64 unkOffset;
    int64 tagOffset;
    FSeek(vertexOffset + dataPos);
    Vector3 vertexes[vertexCount];
    FSeek(faceOffset + dataPos);
    Face faces[faceCount];
    FSeek(tagOffset + dataPos);
    FaceTag faceTags[tagCount];
    FSeek(unkOffset + dataPos);
    unkStr unk[unk1/16];
}Mesh<optimize=false>;

typedef struct{
    SetRandomBackColor();
	int padding0;
	int version;
    int64 meshesOffset;
    int meshesCount;
    int unkCount;
    int64 unkOffset;
    Mesh meshes[meshesCount];
}
ResBulletMesh<open=true>;

ResBinaryFile file("ResBulletMesh")<name=Str("%s", FileNameGetBase(GetFileName()))>;