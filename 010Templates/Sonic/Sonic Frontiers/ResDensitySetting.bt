//------------------------------------------------
//--- 010 Editor v12.0.1 Binary Template
//
//      File: 
//   Authors: Ashrindy
//   Version: 0.1.0
//   Purpose: 
//  Category: 
// File Mask: *.densitysetting
//  ID Bytes: 
//   History: 
//------------------------------------------------


#include "../include.h"

local uint64 dataPos;

typedef struct{
    SetRandomBackColor();
    StringOffset name;
    uint32 flags;
	uint32 align<hidden=true>;
}Model<optimize=false, read=Str("%s",  ReadString(dataPos + name.off))>;

typedef struct{
    SetRandomBackColor();
    uint64 StartOffset;
    uint64 Amount;
}Info<optimize=false>;

typedef struct{
    SetRandomBackColor();
    int footPoint;
	int flags;
	int lodGroupReferenceOffset;
	int lodGroupReferenceCount;
	int collisionDataIndex1;
	int collisionDataIndex2;
	int shadowLodGroupReferenceOffset;
	int shadowLodGroupReferenceCount;
	float angle;
	Vector3 offset;
	Vector3 aabb;
	int id;
}LodGroup<optimize=false>;

typedef struct{
    SetRandomBackColor();
    int index;
	float length;
	int flags;
	int padding1;
}LodGroupReference<optimize=false>;

typedef struct{
    SetRandomBackColor();
    uint32 flags;
    uint32 biomeReferenceOffset;
    uint32 biomeReferenceCount;
    uint32 minBiomeReferenceOffset;
}Biome<optimize=false>;

typedef struct{
    SetRandomBackColor();
    int index;
	int flags;
	int probability;
	int copyFootPoint;
	float scaleMin;
	float scaleMax;
	int hsvPh;
	int hsvSv;
	int upper;
	int padding1;
	int padding2;
	int padding3;
}BiomeReference<optimize=false>;

typedef struct{
    SetRandomBackColor();
    StringOffset name;
    uint32 ID;
    uint32 data3;
    float data4;
    float data5;
}IDItem<optimize=false, read=Str("%s",  ReadString(dataPos + name.off))>;

typedef struct{
    SetRandomBackColor();
    Vector3 offset;
	Vector4 rotation;
	float radius;
	int hitFlags;
	int attri;
	float param[4];
	char idUpperType;
	char idUpperUnk1;
	short idUpperUnk2;
	int idLower;
	int soundEffectIndex;
}CollisionData<optimize=false>;

typedef struct{
    SetRandomBackColor();
	char signature[4]<name="Signature">;
	int version <format=hex, name="Version">;
    Vector2 WorldSize;
    uint32 unk0;
    uint32 count0;
    uint32 lodUnks[32];
    float lodRanges[32];
    StringOffset areaMap;
    StringOffset layerMap;
    StringOffset colorMap;
    StringOffset scaleMap;
    Info OffsetInfo[15];
    FSeek(OffsetInfo[0].StartOffset + dataPos);
    Model models[OffsetInfo[0].Amount];
    FSeek(OffsetInfo[1].StartOffset + dataPos);
    LodGroup lodGroups[OffsetInfo[1].Amount];
    FSeek(OffsetInfo[2].StartOffset + dataPos);
    LodGroupReference lodGroudReferences[OffsetInfo[2].Amount];
    FSeek(OffsetInfo[3].StartOffset + dataPos);
    Biome biomes[OffsetInfo[3].Amount];
    FSeek(OffsetInfo[4].StartOffset + dataPos);
    BiomeReference biomeReferences[OffsetInfo[4].Amount];
    FSeek(OffsetInfo[5].StartOffset + dataPos);
    IDItem IDList[OffsetInfo[5].Amount];
    FSeek(OffsetInfo[6].StartOffset + dataPos);
    CollisionData collisionDatas[OffsetInfo[6].Amount];
    FSeek(OffsetInfo[7].StartOffset + dataPos);
    StringOffset collisionResources[OffsetInfo[7].Amount];
    FSeek(OffsetInfo[8].StartOffset + dataPos);
    uint32 Unk8[OffsetInfo[8].Amount];
    FSeek(OffsetInfo[13].StartOffset + dataPos);
    int32 Unk9[OffsetInfo[13].Amount];
    FSeek(OffsetInfo[14].StartOffset + dataPos);
    StringOffset Unk10[OffsetInfo[14].Amount];
}
ResDensitySetting<open=true>;

ResBinaryFile file("ResDensitySetting")<name=Str("%s", FileNameGetBase(GetFileName()))>;